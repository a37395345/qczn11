<?php

// Check to ensure this file is within the rest of the framework
defined('PATH_BASE') or die();

import( 'imag.base.observer' );

/**
 * Event Class
 *
 * @abstract
 * @package		Imag.Framework
 * @subpackage	Event
 * @modify by   gary wang (wangbaogang123@hotmail.com)
 * 
 */
class Event extends Observer
{

	/**
	 * Constructor
	 *
	 * For php4 compatability we must not use the __constructor as a constructor for plugins
	 * because func_get_args ( void ) returns a copy of all passed arguments NOT references.
	 * This causes problems with cross-referencing necessary for the observer design pattern.
	 *
	 * @param object $subject The object to observe
	 */
	public function Event($subject) {
		parent::__construct($subject);
	}

	/**
	 * Method to trigger events
	 *
	 * @access public
	 * @param array Arguments
	 * @return mixed Routine return value
	 * 
	 */
	/*
	function update(& $args)
	{
		*
		 * First lets get the event from the argument array.  Next we will unset the
		 * event argument as it has no bearing on the method to handle the event.
		 *
		$event = $args['event'];
		unset($args['event']);

		*
		 * If the method to handle an event exists, call it and return its return
		 * value.  If it does not exist, return null.
		 *
		if (method_exists($this, $event)) {
			return call_user_func_array ( array($this, $event), $args );
		} else {
			return null;
		}
	}
	*/
}
